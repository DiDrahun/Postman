http://162.55.220.72:5005/first
// 1. Отправить запрос.
// 2. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 3. Проверить, что в body приходит правильный string.

pm.test("Body is correct", function () {
    pm.response.to.have.body("This is the first responce from server!");
});

http://162.55.220.72:5005/user_info_3
// 1. Отправить запрос.
// 2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 3. Спарсить response body в json.
let resData = pm.response.json();

// 4. Проверить, что name в ответе равно name s request (name вбить руками.)
let response_name = resData.name;
pm.test("response_name equal Diana", function () {
     pm.expect(response_name).to.eql("Diana");
});

// 5. Проверить, что age в ответе равно age s request (age вбить руками.)
let response_age = resData.age;
pm.test("response_age equal 25", function () {
     pm.expect(response_age).to.eql("25");
});

// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
let response_salary = resData.salary;
pm.test("response_salary equal 1000", function () {
     pm.expect(response_salary).to.eql(1000);
});

// 7. Спарсить request.
let reqData = request.data;

// 8. Проверить, что name в ответе равно name s request (name забрать из request.)
let request_name = reqData.name;
 response_name = resData.name;
pm.test("response_name equal request_name", function () {
     pm.expect(response_name).to.eql(request_name);
});

// 9. Проверить, что age в ответе равно age s request (age забрать из request.)
response_age = resData.age;
let request_age = reqData.age;
pm.test("response_age equal request_age", function () {
     pm.expect(response_age).to.eql(request_age);
});

// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
response_salary = resData.salary;
let request_salary = reqData.salary;
pm.test("response_salary equal request_salary", function () {
 pm.expect(String(response_salary)).to.eql(request_salary);
});

// 11. Вывести в консоль параметр family из response.
let response_family = resData.family;
console.log(response_family)

// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
request_salary = reqData.salary;
let request_u_salary_1_5_year = request_salary * 4;
let response_u_salary_1_5_year = resData.family.u_salary_1_5_year;
pm.test("u_salary_1_5_year equal request_salary * 4" , function () {
 pm.expect(response_u_salary_1_5_year).to.eql(request_salary * 4);
});

http://162.55.220.72:5005/object_info_3?name=Diana&age=25&salary=1000
// 1. Отправить запрос.
// 2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 3. Спарсить response body в json.
let resData = pm.response.json();

// 4. Спарсить request.
let reqData = pm.request.url.query.toObject();

// 5. Проверить, что name в ответе равно name s request (name забрать из request.)
let request_name = reqData.name;
let response_name = resData.name;
pm.test("response_name equal request_name", function () {
    pm.expect(response_name).to.eql(request_name);
});

// 6. Проверить, что age в ответе равно age s request (age забрать из request.)
let request_age = reqData.age;
let response_age = resData.age;
pm.test("response_age equal request_age", function () {
    pm.expect(response_age).to.eql(request_age);
});

// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
let request_salary = reqData.salary;
let response_salary = resData.salary;
pm.test("response_salary equal request_salary", function () {
    pm.expect(String(response_salary)).to.eql(request_salary);
});

// 8. Вывести в консоль параметр family из response.
let response_family = resData.family;
console.log("family: ", response_family)

// 9. Проверить, что у параметра dog есть параметры name.
let dog = resData.family.pets.dog;
pm.test("dog includes name", function () {
    pm.expect(JSON.stringify(dog)).to.include("name");
});

// 10. Проверить, что у параметра dog есть параметры age.
dog = resData.family.pets.dog;
pm.test("dog includes age", function () {
    pm.expect(JSON.stringify(dog)).to.include("age");
});

// 11. Проверить, что параметр name имеет значение Luky.
let dog_name = resData.family.pets.dog.name;
pm.test("check dog name", function () {
    pm.expect(dog_name).to.eql("Luky");
});

// 12. Проверить, что параметр age имеет значение 4.
let dog_age = resData.family.pets.dog.age;
pm.test("check dog age", function () {
    pm.expect(dog_age).to.eql(4);
});

http://162.55.220.72:5005/object_info_4
// 1. Отправить запрос.
// 2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 3. Спарсить response body в json.
let respData = pm.response.json();

// 4. Спарсить request.
let reqData = pm.request.url.query.toObject();

// 5. Проверить, что name в ответе равно name s request (name забрать из request.)
let response_name = respData.name;
let request_name = reqData.name;
pm.test("response_name equal request_name", function () {
    pm.expect(response_name).to.eql(request_name);
});

// 6. Проверить, что age в ответе равно age из request (age забрать из request.)
response_age = respData.age;
let request_age = reqData.age;
pm.test("response_age equal request_age", function () {
    pm.expect(String(response_age)).to.eql(request_age);
});

// 7. Вывести в консоль параметр salary из request.
let request_salary = reqData.salary;
console.log(request_salary);

// 8. Вывести в консоль параметр salary из response.
let response_salary = respData.salary;
console.log(response_salary);

// 9. Вывести в консоль 0-й элемент параметра salary из response.
console.log(response_salary[0]);

// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
console.log(response_salary[1]);

// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
console.log(response_salary[2]);

// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
request_salary = reqData.salary;
pm.test("0 element equal request_salary", function () {
    pm.expect(response_salary[0]).to.eql(Number(request_salary));
});

// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
pm.test("1 element equal request_salary*2", function () {
    pm.expect(Number(response_salary[1])).to.eql(request_salary * 2);
});

// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
pm.test("2 element equal request_salary*3", function () {
    pm.expect(Number(response_salary[2])).to.eql(request_salary * 3);
});

// 15. Создать в окружении переменную name
pm.environment.set("name");

// 16. Создать в окружении переменную age
pm.environment.set("age");

// 17. Создать в окружении переменную salary
pm.environment.set("salary");

// 18. Передать в окружение переменную name
pm.environment.set("name", "Diana");

// 19. Передать в окружение переменную age
pm.environment.set("age", "25");

// 20. Передать в окружение переменную salary
pm.environment.set("salary", "1000");

// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
response_salary = respData.salary;
for ( let i = 0; i < response_salary.length; i++){
    console.log(response_salary[i]);
}

http://162.55.220.72:5005/user_info_2
// 1. Вставить параметр salary из окружения в request
pm.environment.get("salary");

// 2. Вставить параметр age из окружения в age
pm.environment.get("age");

// 3. Вставить параметр name из окружения в name
pm.environment.get("name");

// 4. Отправить запрос.
// 5. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 6. Спарсить response body в json.
let respData = pm.response.json();

// 7. Спарсить request.
let reqData = request.data;

// 8. Проверить, что json response имеет параметр start_qa_salary
pm.test("response includes start_qa_salary", function () {
    pm.expect(JSON.stringify(respData)).to.include("start_qa_salary");
});

// 9. Проверить, что json response имеет параметр qa_salary_after_6_months
pm.test("response includes qa_salary_after_6_months", function () {
    pm.expect(JSON.stringify(respData)).to.include("qa_salary_after_6_months");
});

// 10. Проверить, что json response имеет параметр qa_salary_after_12_months
pm.test("response includes qa_salary_after_12_months", function () {
    pm.expect(JSON.stringify(respData)).to.include("qa_salary_after_12_months");
});

// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
pm.test("response includes qa_salary_after_1.5_year", function () {
    pm.expect(JSON.stringify(respData)).to.include(['qa_salary_after_1.5_year']);
});

// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
pm.test("response includes qa_salary_after_3.5_years", function () {
    pm.expect(JSON.stringify(respData)).to.include(['qa_salary_after_3.5_years']);
});

// 13. Проверить, что json response имеет параметр person
pm.test("response includes person", function () {
    pm.expect(JSON.stringify(respData)).to.include("person");
});

// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
let start_qa_salary = respData.start_qa_salary;
let request_salary = reqData.salary;
pm.test("start_qa_salary equal request_salary", function () {
    pm.expect(String(start_qa_salary)).to.eql(request_salary);
});

// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
pm.test("qa_salary_after_6_months equal request_salary * 2", function () {
    pm.expect(respData.qa_salary_after_6_months).to.eql(request_salary * 2);
});

// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
pm.test("qa_salary_after_12_months equal request_salary * 2.7", function () {
    pm.expect(respData.qa_salary_after_12_months).to.eql(request_salary * 2.7);
});

// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
let qa_salary_after_1_5_year = respData["qa_salary_after_1.5_year"]
pm.test("qa_salary_after_1.5_year equal request_salary * 3.3", function () {
    pm.expect(qa_salary_after_1_5_year).to.eql(request_salary * 3.3);
});

// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
let qa_salary_after_3_5_year = respData["qa_salary_after_3.5_years"]
pm.test("qa_salary_after_3.5_year equal request_salary * 3.8", function () {
    pm.expect(qa_salary_after_3_5_year).to.eql(request_salary * 3.8);
});

// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
pm.test("1 element equal request_salary", function () {
     pm.expect(String(respData.person.u_name[1])).to.eql(request_salary);
});

// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
pm.test("u_age equal request_age", function () {
     pm.expect(String(respData.person.u_age)).to.eql(reqData.age);
});

// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
pm.test("u_salary_5_years equal request_salary", function () {
     pm.expect(respData.person.u_salary_5_years).to.eql(request_salary * 4.2);
});

// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
response_person = respData.person;
console.log(Array.isArray(Object.keys( response_person)));

for ( let i = 0; i < Object.keys( response_person).length; i++){
    console.log(Object.keys( response_person)[i]);
}